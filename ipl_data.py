# -*- coding: utf-8 -*-
"""Copy of abhi_final_ipl_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-vOcYY9StfWPcsWcYm_EQ8yvEdr-QU5g
"""

# Commented out IPython magic to ensure Python compatibility.
#Code References:
#https://towardsdatascience.com/analysing-ipl-data-to-begin-data-analytics-with-python-5d2f610126a

#https://medium.com/ai-in-plain-english/ipl-data-analysis-using-python-b6a0dac0a076

#https://www.kaggle.com/nulldata/begin-your-data-analysis-in-python-with-ipl-data


import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns

import warnings
warnings.simplefilter(action = "ignore", category = FutureWarning)

# %matplotlib inline

ipl_matches_df = pd.read_csv("matches.csv")
ipl_deliveries_df = pd.read_csv("deliveries.csv")
#drop umpire3 column, umpire 3 column has Nan values hence this column is dropped.
ipl_matches_df.drop(['umpire3'], axis = 1, inplace = True)

# to avoid conflict amonf team names Team names and cricket stadium names are replaced with a common name throughout the dataset.
ipl_matches_df.team1.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)
ipl_matches_df.team2.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)
ipl_matches_df.winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)
ipl_matches_df.venue.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',
                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',
                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',
                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',
                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',
                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',
                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',
                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',
                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},regex=True,inplace=True)
ipl_deliveries_df.replace('Bangalore','Bengaluru', inplace = True)

#fill missing values of city details with venue details for city Column
ipl_matches_df['city'].fillna(ipl_matches_df['venue'], inplace = True)

#fill result details inplace for winnner column in ipl_matches_df dataframe.
ipl_matches_df['winner'].fillna(ipl_matches_df['result'], inplace = True)

#fill result details inplace of True fir player of the match data
ipl_matches_df['player_of_match'].fillna(ipl_matches_df['result'], inplace = True)

#fill unknown inplace of Nan for Umpire1 data
ipl_matches_df['umpire1'].fillna('unknown', inplace = True)

#fill unknown inplace of Nan for Umpire2 data
ipl_matches_df['umpire2'].fillna('unknown', inplace = True)

ipl_matches_df_new = ipl_matches_df
ipl_matches_df_new["match_id"] = ipl_matches_df["id"]

#Merging both matches and deliveries.csv data
ipl_match_deliveries_df = pd.merge(ipl_deliveries_df, ipl_matches_df, how='left', on=['match_id'])

# take the total list of seasons from matches and deliveries csv file.
season_list = list(ipl_match_deliveries_df["season"].unique())
#Sort the season data list, 2008 to 2019 are listed.
season_list.sort()

#iterate through each season
for season in season_list:
  # season = 2017
  #Bastmens are sorted in Alphabetical order and Runs scored by all batsmen during each IPL season are listed.
  batting_tot=ipl_match_deliveries_df.loc[ipl_match_deliveries_df['season'] == season].groupby('batsman').apply(lambda x:np.sum(x['batsman_runs'])).reset_index(name='Runs')
  
  #batsmens are sorted as per their runs, batsmen with Highest score come first. 
  batting_sorted=batting_tot.sort_values(by='Runs',ascending=False)
  
  #top 20 batsmens with highest runs are listed.
  top_batsmen=batting_sorted[:20] 
  print('The Top 20 Batsmen across different teams in  '+str(season)+':\n',top_batsmen)

  width1 = 30
  height1 = 10
  width_height_1 = (width1, height1)

  plt.figure(figsize=width_height_1)

# plot top 20 batsmens 
  plt.bar(top_batsmen['batsman'],top_batsmen['Runs'])
  #we can see e red dor on the bar graph after the plt.scatter() is executed.
  plt.scatter(top_batsmen['batsman'],top_batsmen['Runs'],color='r')
  # xtcicks and yticks are for the text being printed on the plots where we specify the fontsize and the angle to which the text needs to be rotated.  
  plt.xticks(rotation=60)
  plt.xticks(fontsize=30)
  plt.xlabel('Top 20 Batsmen across all teams in IPL- Seasons '+str(season),size=20)
  plt.ylabel('Runs Scored',size=20)
  plt.title('Top 20 Batsmen across all teams in IPL- Seasons '+str(season),size=20)
  plt.show()

#pick the bowlers with highest number of wickets, sort the list of bowlers as per totsal number of wickets they have taken and plot it.
for season in season_list:
  bowling_wickets=ipl_match_deliveries_df[ipl_match_deliveries_df['dismissal_kind']!='run out']
  bowling_tot=bowling_wickets.loc[bowling_wickets['season'] == season].groupby('bowler').apply(lambda x:x['dismissal_kind'].dropna()).reset_index(name='Wickets')
  #lists the wickets taken by each bowler.
  bowling_wick_count=bowling_tot.groupby('bowler').count().reset_index()
  # bowlers with highest wickets are placed first and the list proceeds in descending order. 
  bowling_top=bowling_wick_count.sort_values(by='Wickets',ascending=False)
  #lists top20 highest wicket takers.
  top_bowlers=bowling_top.loc[:,['bowler','Wickets']][0:20] 
  width1 = 30
  height1 = 10
  width_height_1 = (width1, height1)
  plt.figure(figsize=width_height_1)
  print('The Top Wicket Takers across different teams in the Seasons '+str(season)+' are:\n',top_bowlers)
  plt.bar(top_bowlers['bowler'],top_bowlers['Wickets'],color='r')
  plt.plot(top_bowlers['bowler'],top_bowlers['Wickets'],color='g')
  plt.xticks(rotation=60)
  plt.xticks(fontsize=30)
  plt.xlabel('Top 20 Bowlers  across different teams in IPL- Seasons '+str(season),size=20)
  plt.ylabel('Wickets Taken',size=20)
  plt.title('Top 10 Bowlers  across different teams in IPL- Seasons '+str(season),size=20)
  plt.show()

#plots Player Name with respect how many Player fo the match award he has won in that particular IPL season.  
for season in season_list:
  width1 = 30
  height1 = 10
  width_height_1 = (width1, height1)
  plt.figure(figsize=width_height_1)
  ax = sns.countplot("player_of_match", data = ipl_matches_df.loc[ipl_matches_df['season'] == season],order = ipl_matches_df.loc[ipl_matches_df['season'] == season]['player_of_match'].value_counts()[:20].index,palette='viridis')
  plt.title("Total number of Player of the match in season "+str(season))
  # plt.xticks(rotation=90, ha = 'right')
  plt.xticks(rotation=60)
  plt.xticks(fontsize=20)
  plt.ylabel('Number of Player of the match  across different teams in season '+str(season),size=20)
  plt.xlabel('Name of the top 20 Player of the match  across different teams in season '+str(season),size=20)
  #annotation_plot(ax,0.08,1)
  plt.show()

# Plots how many number of matches a team has won on electing to field on winning a toss and how many number of matches a team has won on electing to bat on winnign a toss.
#for each IPL season the we have the aboev plot. 
for season in season_list:
  width1 = 30
  height1 = 10
  width_height_1 = (width1, height1)
  plt.figure(figsize=width_height_1)
  ax = sns.countplot("winner", data = ipl_matches_df.loc[ipl_matches_df['season'] == season], hue = 'toss_decision',order = ipl_matches_df.loc[ipl_matches_df['season'] == season]['winner'].value_counts().index,palette='viridis')
  plt.title("Total number of wins in season "+str(season))
  plt.xticks(rotation=45, ha = 'right')
  plt.xticks(fontsize=20)
  plt.ylabel("Total Number of Matches in season "+str(season),size=20)
  plt.title('Team winning Toss Decision VS Match Winning the match in IPL- Seasons '+str(season),size=20)
  #annotation_plot(ax,0.08,1)
  plt.show()


#plot Wins by teams in difrerent cities here. 
ipl_matches_df = pd.read_csv("matches.csv")

ipl_matches_df["type"] = "pre-qualifier"
for year in range(2008, 2017):
    final_match_index = ipl_matches_df[ipl_matches_df['season']==year][-1:].index.values[0]

ipl_matches_df.groupby(["type"])["id"].count()
ipl_matches_df.head()

ipl_deliveries_df = pd.read_csv("deliveries.csv")
ipl_deliveries_df.head()

# Innings match and corresponding runs are being grouped.
team_score = ipl_deliveries_df.groupby(['match_id', 'inning'])['total_runs'].sum().unstack().reset_index()

# id ,season, city,date,team1, team2, toss_winner,toss_decision,result,dl_applied,umpire1,umpire2,umpire3,type,match_id,1,2  are grouped.
matches_data_merged = pd.merge(ipl_matches_df, team_score, left_on = 'id', right_on = 'match_id', how = 'outer')

#innings, match id and extra runs are being grouped.
team_extras = ipl_deliveries_df.groupby(['match_id', 'inning'])['extra_runs'].sum().unstack().reset_index()

#Appending team_extras to matches_data_merged obtained from ipl_matches_df
matches_data_merged = pd.merge(matches_data_merged, team_extras, on = 'match_id', how = 'outer')


#No of wins by team and season in each city
x, y = 2008, 2017
while x < y:
    #Season wise how many matches each team has won at a particular venue.
    wins_percity = matches_data_merged[matches_data_merged['season'] == x].groupby(['winner', 'city'])['match_id'].count().unstack()
    plot = wins_percity.plot(kind='bar', stacked=False, title="Team wins in different cities\nSeason "+str(x), figsize=(14, 10))
    sns.set_palette("Paired", len(matches_data_merged['city'].unique()))
    plot.set_xlabel("Teams")
    plot.set_ylabel("No of wins")
    plot.legend(loc='', prop={'size':8})
    x+=1

sns.set_style("darkgrid")
plt.rcParams['figure.figsize'] = (14, 8)

# specifies number of times a Player has won player_of_match award. 
ipl_matches_df['player_of_match'].value_counts()

#Top 10 player_of_match are being considered
ipl_matches_df['player_of_match'].value_counts()[0:10]

ipl_matches_df['player_of_match'].value_counts()[0:10]

#Names of the top 10 Players are present in the list.
list(ipl_matches_df['player_of_match'].value_counts()[0:10].keys())

plt.figure(figsize=(8,5))

#While Plotting the Graph X-Axis is considered with Player Names and Y-axis is considered with Number of Matches count. Bar Graph indicates number of Player_of_match award won by each Player. 
plt.bar(list(ipl_matches_df['player_of_match'].value_counts()[0:5].keys()),ipl_matches_df['player_of_match'].value_counts()[0:5],color="green")
plt.title("Player of the match Stats")
plt.xlabel("Player name")
plt.ylabel("Number of matches")
plt.show()
plt.figure(figsize=(8,5))

#indicates the number of matches which are tie, number of matches with no result and number of matches with normal result win or loose.
ipl_matches_df["result"].value_counts()

#indicates the number of Toss win by each Team in IPL in all seasons.
ipl_matches_df["toss_winner"].value_counts()

#win_by_runs is considered for Batting first. Here whole Dataframe of ipl_matches_df is considered where win_by_runs is nto equal to 0.
batting_first=ipl_matches_df[ipl_matches_df['win_by_runs']!=0]

#Lists how many time sBattign first Each team has won.
batting_first["winner"].value_counts()

plt.figure(figsize=(7,7))
#color plot is done as Purple for Blue for Mumbai Indians, Yellow for Chennai Super Kings, Orange for Knigs11 Punjab.
# Here X Axis is denoted by the team names and Y axis represents number of wins each team has got.
# batting_first["winner"].value_counts()[0:3].keys() provides the 3 Team names and list(batting_first["winner"].value_counts()[0:3]) provides the number of matches won by each team batting first.
plt.bar(list(batting_first["winner"].value_counts()[0:3].keys()),list(batting_first["winner"].value_counts()[0:3]),color=["blue","yellow","orange"])
plt.title("Batting First winner bar chart")
plt.xlabel("Team Name")
plt.ylabel("Number of matches")
plt.show()

plt.figure(figsize=(14,14))
#list(batting_first["winner"].value_counts() specifies the list of number of matches won and list(batting_first["winner"].value_counts().keys() specifies the Team names corresponding to number of matches won. 
#pie chart is plotted for all the teams with the win percentage.
plt.pie(list(batting_first["winner"].value_counts()),labels=list(batting_first["winner"].value_counts().keys()),autopct="%0.1f%%")
plt.title("Batting First Win Chart stats for individual teams")
plt.show()

#win_by_wickets specifies batting second team has won the match. Populates all the data of ipl_matches_df Dataframe where win_by_wickets!=0.
batting_second=ipl_matches_df[ipl_matches_df["win_by_wickets"]!=0]

# Gives the first five rows of the dataframe.
batting_second.head()

plt.figure(figsize=(12,12))

#specifies the count of matches won by each team batting second in the entire IPL season.
batting_second["winner"].value_counts()

plt.figure(figsize=(7,7))
#color plot is done as Purple for Kolkatta Knight Riders, Blue for Mumbai Indians, Yellow for Chennai Super Kings.
# Here X Axis is denoted by the team names and Y axis represents number of wins each team has got.
# batting_second["winner"].value_counts()[0:3].keys() provides the 3 Team names and list(batting_second["winner"].value_counts()[0:3]) provides the number of matches won by each team batting second.
plt.bar(list(batting_second["winner"].value_counts()[0:3].keys()),list(batting_second["winner"].value_counts()[0:3]),color=["purple","blue","yellow"])
plt.title("Batting Second winner bar chart")
plt.xlabel("Team Name")
plt.ylabel("Number of matches")
plt.show()



